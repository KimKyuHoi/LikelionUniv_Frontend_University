name: stag-client-deploy

on: 
  push: 
    branches: [ "stag" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.5.2
        with:
          node-version: lts/Hydrogen
          
      - name: Cache node modules
      	# 그걸 제공하는 Action도 있다.
        uses: actions/cache@v2.1.8
        # 해당 step을 대표하는 id를 설정할 수도 있다. 해당 값은 뒤의 step에서 사용한다.
        id: cache
        with:
          # node_modules라는 폴더를 검사하여
          path: node_modules
          # 아래 키값으로 cache가 돼있는지 확인한다.
          key: npm-packages-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Build
        run: npm run build

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_EMAIL }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKER_CLIENT_STAG_IMAGE }}

      - name: client-deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo docker rm -f ${{ secrets.DOCKER_CLIENT_STAG_CONTAINER }}
            sudo docker rmi ${{ secrets.DOCKER_CLIENT_STAG_IMAGE }}
            sudo docker-compose -f ${{ secrets.DOCKER_COMPOSE_DIRECTORY }} up -d
            sudo docker image prune -f

